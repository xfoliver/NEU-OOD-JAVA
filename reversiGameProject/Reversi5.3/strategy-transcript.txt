Strategy Simulation : Avoiding Corners Strategy
environmental background
Game state: The starting position of the Reversi game.
Current player: Black (ChessPieces.X).
Strategy description
The corner avoidance strategy is an AI strategy in the game Reversi that prioritizes moves away from corners. This strategy is designed to reduce the risk of giving your opponent a strategic advantage by avoiding positions close to corners.

Decision-making process
Get legal moves: The strategy first uses model.getValidMoves(model.getCurrentTurn()) to retrieve all legal moves of the current player (black).
Filter safe moves: Then filter out moves close to the corners of the board, which is determined via the isNextToCorner method.
Evaluate moves for maximum capture: From the remaining safe moves, choose the move that will capture the opponent's pieces to the greatest extent possible. This is done using model.evaluateMove(move, model.getCurrentTurn()).
Alternative strategy: If no safe move is available, it defaults to another strategy, such as picking the first legal move or implementing random selection.
Example execution
Legal moves: Assume that the legal moves at the beginning are (2,3), (3,2), (4,5), (5,4).
Filtering: Movements (2,3), (3,2) close to the corners are filtered out.
Evaluation: In (4,5), (5,4), both moves capture 1 opponent piece.
Decision: The strategy may choose (4,5) as the best move because it is the first in the max-capture list.
corner detection
The corners are defined as (0,0), (0,boardSize-1), (boardSize-1,0), (boardSize-1,boardSize-1).
isAdjacent checks whether two coordinates are adjacent, taking into account the hexagonal structure of the chessboard.
Strategic Strengths and Weaknesses
Advantages: Avoid corners early in the game to prevent giving your opponent a strong position.
Disadvantages: This strategy may miss opportunities to capture corners at safer times later in the game, or may not be effective against other tactical threats.


Strategy Simulation : Corner Strategy
environmental background
Game status: Othello game is in progress.
Current player: Assume black (ChessPieces.X).
Strategy description
Corner strategy is an AI strategy in the game Reversi that prioritizes moves that occupy corners. This strategy is designed to gain strategic advantage by controlling the corners of the board.

Decision-making process
Get legal moves: The strategy first uses model.getValidMoves(model.getCurrentTurn()) to retrieve all legal moves of the current player (black).
Check for Corner Occupation: Then check if there is a corner position that can be occupied, this is done by looking for the corner position in the list of legal moves.
Prefer Corners: If there are corners that can be captured, the strategy will prioritize those locations.
Alternative Strategy: If there are no corners to capture, the strategy falls back to the maximum capture strategy, trying to choose the move that captures the most opponent pieces.
Example execution
Legal moves: Assume that the current legal moves are (2,3), (0,5), (4,4), (3,5).
Checking corners: Among these legal moves, (0,5) is a corner position.
Decision: The strategy chooses (0,5) as the best move since it is a corner position.
Corner location
The corners are defined as (0,0), (0,5), (5,0), (5,5).
maximum capture strategy
If there are no corners to capture, the strategy uses a maximum capture strategy, choosing the legal move that captures the most opponent pieces.
Strategic Strengths and Weaknesses
Advantages: Capturing a corner can provide a stable strategic advantage, as corner positions are less likely to be flipped by opponents.
Disadvantages: If you capture a corner too early, you risk exposing surrounding positions, giving your opponent an opportunity to attack.


Strategy Simulation : Maximum Capture Strategy
environmental background
Game status: Othello game is in progress.
Current player: Assume black (ChessPieces.X).
Strategy description
The maximum capture strategy is an AI strategy in the game Reversi that aims to capture as many opponent pieces as possible with each move. If multiple moves have the same capture amount, the strategy will give priority to the move above or further to the left.

Decision-making process
Get legal moves: The strategy first uses model.getValidMoves(model.getCurrentTurn()) to retrieve all legal moves of the current player (black).
Evaluate and select the best move: Iterate through all legal moves and use model.evaluateMove(move, model.getCurrentTurn()) to calculate the number of captures for each move.
Prefer moves above or further to the left: Among moves with the same capture amount, the strategy will give priority to moves above or further to the left.
Example execution
Legal moves: Assume that the current legal moves are (3,2), (2,3), (4,5), (3,4).
Evaluate the catches: The catches for each move are 2, 3, 1, 3 respectively.
Decision: Although (2,3) and (3,4) have the same catch (both 3), (2,3) is higher, so the strategy chooses (2,3) as the best move.
isUpperLeft method
This method is used to select the move above or further to the left among moves with the same capture amount.
Strategic Strengths and Weaknesses
Advantages: By maximizing the capture amount per move, you can effectively reduce the number of your opponent's pieces, thereby gaining an advantage in the game.
Disadvantages: This strategy may ignore strategic locations on the board, such as corners or edges, which may be more important later in the game.


Strategy simulation : stochastic strategy
environmental background
Game status: Othello game is in progress.
Current player: assumed to be either side (e.g. black ChessPieces.X or white ChessPieces.O).

Strategy description
Random strategy is an AI strategy in the game Reversi that does not consider strategy or tactics, but instead randomly selects one of all legal moves to execute. This strategy is useful for simulating non-professional players or testing game balance.

Decision-making process
Get legal moves: The strategy first uses model.getValidMoves(model.getCurrentTurn()) to get all legal moves of the current player.
Select random moves: If there are legal moves, the strategy will randomly select one of them. This is achieved by randomly generating an index between 0 and the length of the legal move list.
Example execution
Legal moves: Assume that the current legal moves are (3,2), (2,3), (4,5), (3,4).
Select random moves: The strategy randomly selects one of these moves. For example, if the random number is 2, select (4,5).
Implementation of randomness
Randomness is achieved through Java's Random class. Use random.nextInt(validMoves.size()) to generate a random index between 0 and the number of legal moves.
Strategic Strengths and Weaknesses
Advantages: Random strategies can make the game results unpredictable and increase the fun of the game.
Disadvantages: Often does not produce optimal game results due to complete neglect of strategy and tactics. This strategy may put you at a disadvantage when playing against experienced players.